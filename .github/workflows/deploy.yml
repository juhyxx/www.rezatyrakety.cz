name: Deploy changed files to FTP

on:
  push:
    branches:
      - master

jobs:
  ftp-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch full history
        run: git fetch --prune --unshallow

      - name: Get changed files
        id: changed-files
        run: |
          # Detect changed or added files
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD)
          ADDED_FILES=$(git ls-files --others --exclude-standard)

          # Combine changed and added files into one variable
          ALL_FILES="$CHANGED_FILES $ADDED_FILES"
          
          # Remove files that start with a dot (e.g. .git, .github)
          ALL_FILES=$(echo "$ALL_FILES" | grep -v '^\.')

          # Debugging: print the filtered files
          echo "Files after filtering: $ALL_FILES"
          
          # Check if there are any files to deploy
          if [ -z "$ALL_FILES" ]; then
            echo "No files to deploy, exiting."
            exit 0
          fi

          # Loop through each file and export it to GITHUB_ENV
          IFS=$'\n'
          for file in $ALL_FILES; do
            # Remove leading/trailing whitespace
            file=$(echo $file | xargs)
            # Ensure the file is not empty
            if [ -n "$file" ]; then
              echo "CHANGED_FILE=$file" >> $GITHUB_ENV
            fi
          done

      - name: Upload changed files via FTP
        run: |
          sudo apt-get install -y lftp
          
          # Debugging: check the environment variable CHANGED_FILE
          echo "Files to upload: ${{ env.CHANGED_FILE }}"
          
          # Open FTP connection
          lftp -c "open -u ${{ secrets.FTP_USERNAME }},${{ secrets.FTP_PASSWORD }} ${{ secrets.FTP_SERVER }}; quit"

          # Loop through each file and upload
          for file in ${{ env.CHANGED_FILE }}; do
            # Ensure the file exists before attempting to upload
            if [ -f "$file" ]; then
              # Skip files starting with a dot (hidden files)
              if [[ "$file" == .* ]]; then
                echo "Skipping hidden file or directory: $file"
                continue
              fi
              echo "Uploading $file"
              
              # Create corresponding directories on the FTP server if needed
              dir_path=$(dirname "$file")
              echo "Creating directories for $dir_path if necessary"
              lftp -c "open -u ${{ secrets.FTP_USERNAME }},${{ secrets.FTP_PASSWORD }} -e 'set ssl:verify-certificate no; mkdir -p $dir_path; put -O $dir_path $file; quit' ${{ secrets.FTP_SERVER }}"
            fi
          done
